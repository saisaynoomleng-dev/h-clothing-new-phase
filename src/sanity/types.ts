/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Review = {
  _id: string;
  _type: 'review';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  role?: string;
  reviewDate?: string;
  desc?: string;
  rating?: number;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
      listItem?: 'bullet';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }
>;

export type Product = {
  _id: string;
  _type: 'product';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  category?:
    | 'coat'
    | 'jeans'
    | 'shoe'
    | 'bottom'
    | 'top'
    | 't-shirt'
    | 'perfume'
    | 'bag'
    | 'hat'
    | 'watch'
    | 'dress'
    | 'blazer'
    | 'blouse';
  desc?: BlockContent;
  reviews?: Array<{
    name?: string;
    slug?: Slug;
    reviewDate?: string;
    title?: string;
    desc?: string;
    rating?: number;
    mainImage?: {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
    };
    isVerified?: boolean;
    _key: string;
  }>;
  rating?: number;
  mainImages?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
    _key: string;
  }>;
  color?: Array<string>;
  size?: Array<string>;
  inStock?: number;
  brand?: {
    _ref: string;
    _type: 'reference';
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: 'brand';
  };
  origin?: string;
  price?: number;
  isDiscounted?: boolean;
  discountAmount?: number;
  tags?: 'women' | 'men' | 'accessories';
};

export type Brand = {
  _id: string;
  _type: 'brand';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  slug?: Slug;
  mainImage?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
  };
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

export type AllSanitySchemaTypes =
  | Review
  | BlockContent
  | Product
  | Brand
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: ALL_PRODUCTS_QUERY
// Query: *[_type == 'product' && defined(slug.current)]  | order(_createdAt desc){  name,  slug,  price,  category,  mainImages[]{    asset->{url},    alt  },  rating,  isDiscounted,  discountAmount}
export type ALL_PRODUCTS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  price: number | null;
  category:
    | 'bag'
    | 'blazer'
    | 'blouse'
    | 'bottom'
    | 'coat'
    | 'dress'
    | 'hat'
    | 'jeans'
    | 'perfume'
    | 'shoe'
    | 't-shirt'
    | 'top'
    | 'watch'
    | null;
  mainImages: Array<{
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  }> | null;
  rating: number | null;
  isDiscounted: boolean | null;
  discountAmount: number | null;
}>;
// Variable: ALL_REVIEWS_QUERY
// Query: *[_type == 'review' && defined(slug.current)]|order(reviewDate desc){  name,  slug,  rating,  reviewDate,  role,  desc,  mainImage{    asset->{url},    alt  }}
export type ALL_REVIEWS_QUERYResult = Array<{
  name: string | null;
  slug: Slug | null;
  rating: number | null;
  reviewDate: string | null;
  role: string | null;
  desc: string | null;
  mainImage: {
    asset: {
      url: string | null;
    } | null;
    alt: string | null;
  } | null;
}>;

// Query TypeMap
import '@sanity/client';
declare module '@sanity/client' {
  interface SanityQueries {
    "*[_type == 'product'\n && defined(slug.current)]\n  | order(_createdAt desc){\n  name,\n  slug,\n  price,\n  category,\n  mainImages[]{\n    asset->{url},\n    alt\n  },\n  rating,\n  isDiscounted,\n  discountAmount\n}": ALL_PRODUCTS_QUERYResult;
    "\n  *[_type == 'review'\n && defined(slug.current)]\n|order(reviewDate desc){\n  name,\n  slug,\n  rating,\n  reviewDate,\n  role,\n  desc,\n  mainImage{\n    asset->{url},\n    alt\n  }\n}": ALL_REVIEWS_QUERYResult;
  }
}
